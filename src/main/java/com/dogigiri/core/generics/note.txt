# Sometimes we create a class like a store that stores int values. in some point we might need to store Some other values
like Users, Scores etc. We actually don't want to implement that pattern for all the types we need. this is where generics
come to game.
NOTE: we shouldn't use Object class for implementing such a concept. because then we need to do a lot of exceptionHandling
caused by ClassTypeCast Exception which is a runtime exception, and we don't want it. Generics will handle this problem in
compiler level.

# WE can also restrict our Generic classes by boundary types. we can extend Classes and interfaces.
for example:
Generic<T extends Cloneable & Comparable> -> this means only types that implement cloneable interface are allowed.

# When turned to bytecode we can see that the generic types are all that Object class and when we extend the type it
will be changed to that.

# We can also define Generic methods which have benefits of not defining all parameters as Object.

# we can have multiple parameters in generic type separated by comma.

# we can have generic methods inside non-generic class

# When we have inheritance we can use subtypes instead of the main type anytime except when we want List of the subtypes
in this case we need to create another list of the main type and iterate the subtype list and add the elements to the
main type list. BUT this is not good so we use wildCards.

# ? is the wildcard we pass as a generic type. with this java crates a virtual class named CAPTURE#1, and it's like
the object class. when ? extends a class we can only read values from it. but for writing it we should use super keyword